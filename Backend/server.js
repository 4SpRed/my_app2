import express from "express";
import dotenv from "dotenv";
import cors from "cors";
import mongoose from "mongoose";
import { MongoClient, ServerApiVersion } from "mongodb";
import authRoutes from "./routes/authRoutes.js";
import appointmentRoutes from "./routes/appointments_routes.js";



// ‚úÖ Chargement des variables d'environnement
dotenv.config();

// ‚úÖ V√©rification des variables essentielles
if (!process.env.STRING_URI) {
    console.error("‚ùå STRING_URI manquant dans .env");
    process.exit(1);
}

// ‚úÖ Initialisation du serveur Express
const app = express();
const port = process.env.PORT || 5000;

// ‚úÖ Middleware
app.use(express.json());
app.use(cors());




// ‚úÖ Connexion MongoDB avec `mongoose`
mongoose.connect(process.env.STRING_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log("‚úÖ Connexion MongoDB r√©ussie !"))
.catch((error) => {
    console.error("‚ùå Erreur de connexion √† MongoDB :", error);
    process.exit(1);
});

// ‚úÖ Connexion √† MongoDB via `MongoClient` pour certaines fonctionnalit√©s
const client = new MongoClient(process.env.STRING_URI, {
    serverApi: { version: ServerApiVersion.v1, strict: true, deprecationErrors: true },
});

let db;
async function connectDB() {
    try {
        await client.connect();
        db = client.db("medecinsDB"); // ‚ö†Ô∏è V√©rifie que ce nom de base est correct !
        console.log("‚úÖ Connexion MongoDB (via MongoClient) r√©ussie !");
    } catch (error) {
        console.error("‚ùå Erreur de connexion √† MongoDB :", error);
        process.exit(1);
    }
}

// ‚úÖ Ajout des routes apr√®s connexion r√©ussie
connectDB().then(() => {
    if (db) {
        console.log("‚úÖ Routes MongoDB activ√©es !");
        app.use("/api/appointments", appointmentRoutes(db));
    } else {
        console.error("‚ùå La base de donn√©es n'est pas connect√©e !");
    }
});

// ‚úÖ Routes d'authentification
app.use("/auth", authRoutes);

// ‚úÖ Route principale
app.get("/", (req, res) => {
    res.send("üöÄ Serveur Express en ligne !");
});

// üîé **Route `/search` pour rechercher des m√©decins**
app.get("/search", async (req, res) => {
    try {
        if (!db) {
            return res.status(500).json({ error: "Connexion √† la base de donn√©es non √©tablie" });
        }
        const { query, location } = req.query;
        console.log("üîç Recherche demand√©e :", { query, location });
        let filter = {};
        if (query) {
            filter.$or = [
                { Nom: { $regex: query, $options: "i" } },
                { Pr√©nom: { $regex: query, $options: "i" } },
                { Sp√©cialit√©: { $regex: query, $options: "i" } },
                { Wilaya: { $regex: query, $options: "i" } }
            ];
        }
        if (location) {
            filter.Wilaya = { $regex: location, $options: "i" };
        }
        const doctors = await db.collection("medecins").find(filter).toArray();
        console.log(`‚úÖ ${doctors.length} m√©decin(s) trouv√©(s).`);
        if (doctors.length === 0) {
            return res.status(404).json({ message: "Aucun m√©decin trouv√©." });
        }
        res.json(doctors);
    } catch (err) {
        console.error("‚ùå Erreur lors de la recherche :", err);
        res.status(500).json({ error: err.message });
    }
});

// üîé **Route `/autocomplete` pour les noms et sp√©cialit√©s de m√©decins**
app.get("/autocomplete", async (req, res) => {
    try {
        if (!db) {
            return res.status(500).json({ error: "Connexion √† la base de donn√©es non √©tablie" });
        }
        const { query } = req.query;
        if (!query || query.length < 2) {
            return res.json([]);
        }
        const suggestions = await db.collection("medecins")
            .find({
                $or: [
                    { Nom: { $regex: query, $options: "i" } },
                    { Pr√©nom: { $regex: query, $options: "i" } },
                    { Sp√©cialit√©: { $regex: query, $options: "i" } }
                ]
            })
            .project({ Nom: 1, Pr√©nom: 1, Sp√©cialit√©: 1, Wilaya: 1, Photo: 1 })
            .limit(5)
            .toArray();
        console.log(`üîç Suggestions m√©decins : ${suggestions.length} r√©sultats.`);
        res.json(suggestions);
    } catch (err) {
        console.error("‚ùå Erreur dans /autocomplete :", err);
        res.status(500).json({ error: err.message });
    }
});

// üîé **Route `/autocomplete-location` pour la recherche de wilayas et villes**
app.get("/autocomplete-location", async (req, res) => {
    try {
        if (!db) {
            return res.status(500).json({ error: "Connexion √† la base de donn√©es non √©tablie" });
        }
        const { query } = req.query;
        if (!query || query.length < 2) {
            return res.json([]);
        }
        const suggestions = await db.collection("locations")
            .find({
                $or: [
                    { Wilaya: { $regex: `^${query}`, $options: "i" } },
                    { Ville: { $regex: `^${query}`, $options: "i" } }
                ]
            })
            .limit(5)
            .toArray();
        console.log(`üìç Suggestions lieux : ${suggestions.length} r√©sultats.`);
        res.json(suggestions.map(loc => loc.Wilaya || loc.Ville));
    } catch (err) {
        console.error("‚ùå Erreur dans /autocomplete-location :", err);
        res.status(500).json({ error: err.message });
    }
});

// üöÄ **D√©marrage du serveur**
app.listen(port, () => {
    console.log(`‚úÖ Serveur d√©marr√© sur http://localhost:${port}`);
});
