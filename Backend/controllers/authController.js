import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import nodemailer from "nodemailer";
import { MongoClient } from "mongodb";
import dotenv from "dotenv";

dotenv.config();

const uri = process.env.STRING_URI;
const client = new MongoClient(uri);
let db;

async function connectDB() {
  if (!db) {
    await client.connect();
    db = client.db("medecinsDB");
    console.log("‚úÖ Connexion √† MongoDB r√©ussie");
  }
}

// üîπ **Contr√¥leur pour l'inscription**
export const registerUser = async (req, res) => {
  await connectDB();
  const { firstName, lastName, email, password } = req.body;

  try {
    console.log("‚û°Ô∏è Tentative d'inscription pour:", email);

    // V√©rifier si l'utilisateur existe d√©j√†
    const userExists = await db.collection("users").findOne({ email });
    if (userExists) {
      return res.status(400).json({ error: "Cet email est d√©j√† utilis√©." });
    }

    // Hasher le mot de passe
    const hashedPassword = await bcrypt.hash(password, 10);
    console.log("üîë Mot de passe hach√©");

    // G√©n√©rer un token pour la v√©rification du compte
    const token = Math.random().toString(36).substring(2, 15);

    // Enregistrer l'utilisateur
    await db.collection("users").insertOne({
      firstName,
      lastName,
      email,
      password: hashedPassword,
      token,
      verified: false,
    });

    console.log("‚úÖ Utilisateur enregistr√©");

    // V√©rification de la configuration des emails
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      return res.status(500).json({ error: "Configuration email incorrecte" });
    }

    // Configurer le transporteur d'email (Gmail)
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: { user: process.env.EMAIL_USER, pass: process.env.EMAIL_PASS },
    });

    // Contenu de l'email de v√©rification
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "V√©rification de votre compte",
      text: `Bonjour ${firstName},\n\nCliquez ici pour v√©rifier votre compte : http://localhost:5000/auth/verify/${token}\n\nMerci !`,
    };

    // Envoi de l'email de confirmation
    await transporter.sendMail(mailOptions);
    console.log("üìß Email de confirmation envoy√©");

    res.json({ message: "Utilisateur enregistr√© ! V√©rifiez votre email." });
  } catch (err) {
    console.error("‚ùå Erreur serveur:", err);
    res.status(500).json({ error: "Erreur serveur" });
  }
};

// üîπ **Contr√¥leur pour la v√©rification du compte**
export const verifyUser = async (req, res) => {
  await connectDB();
  const { token } = req.params;

  try {
    console.log("üîç V√©rification du token:", token);
    
    // Rechercher l'utilisateur avec ce token
    const user = await db.collection("users").findOne({ token });
    if (!user) {
      return res.status(400).send("Lien invalide ou d√©j√† utilis√©.");
    }

    // Marquer l'utilisateur comme v√©rifi√©
    await db.collection("users").updateOne(
      { token },
      { $set: { verified: true, token: null } }
    );

    console.log("‚úÖ Compte v√©rifi√© avec succ√®s");
    res.send("Compte v√©rifi√© avec succ√®s !");
  } catch (err) {
    console.error("‚ùå Erreur lors de la v√©rification:", err);
    res.status(500).send("Erreur serveur");
  }
};

// üîπ **Contr√¥leur pour la connexion**
export const loginUser = async (req, res) => {
  await connectDB();
  const { email, password } = req.body;

  try {
    console.log("‚û°Ô∏è Tentative de connexion pour:", email);

    const user = await db.collection("users").findOne({ email });
    if (!user) {
      return res.status(404).json({ error: "Utilisateur non trouv√©" });
    }

    if (!user.verified) {
      return res.status(403).json({ error: "Compte non v√©rifi√©. V√©rifiez votre email." });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: "Mot de passe incorrect" });
    }

    // ‚úÖ G√©n√©ration du token JWT
    const token = jwt.sign(
      { userId: user._id, email: user.email },
      process.env.JWT_SECRET || "SECRET_KEY",
      { expiresIn: "24h" }
    );

    console.log("‚úÖ Connexion r√©ussie pour:", email);
    res.json({ message: "Connexion r√©ussie !", token });
  } catch (err) {
    console.error("‚ùå Erreur serveur:", err);
    res.status(500).json({ error: "Erreur serveur" });
  }
};
